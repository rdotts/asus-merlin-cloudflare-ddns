#!/bin/sh

_DEBUG="off"

log_output()
{
        logger -st "cloudflare_ddns" "$1 $2"
}

debug()
{
        if [ "$_DEBUG" == "on" ]; then
                logger -st "cloudflare_ddns-DEBUG" "$1"
        fi
}

debug "Executed as: $0 $@"

CONFIG=$(dirname $0)/.cloudflare

if [ -r $CONFIG ]; then
	. $CONFIG
else
	( >&2 echo "Missing or unreadable $CONFIG" )
	debug "Missing or unreadable $CONFIG"
fi

# *** USER SETTINGS ***
THROTTLE_SECONDS=5  # Limits calls to Cloudflare to minimize abuse
sleep $THROTTLE_SECONDS

# *** OTHER SETTINGS ***
CMD_ERROR_TEMPFILE=$(dirname $0)/.$(basename $0).command.stderr.tmp
FIRMWARE_NOTIFY_CMD=/sbin/ddns_custom_updated
FIRMWARE_UPDATE_SUCCESS=1
FIRMWARE_UPDATE_FAILURE=0
CLOUDFLARE_AUTH_HEADERS="X-Auth-Email: $CLOUDFLARE_EMAIL
X-Auth-Key: $CLOUDFLARE_API_KEY"
# cloudflare prefers token-based auth, so use that if available
if [ -n $CLOUDFLARE_API_TOKEN ]; then
	CLOUDFLARE_AUTH_HEADERS="Authorization: Bearer $CLOUDFLARE_API_TOKEN"
fi

# user input IP address
NEW_IP=$1

debug "Completed settings"

list_dns_records()
{
	debug "list_dns_records"
	curl --silent --show-error --request GET "https://api.cloudflare.com/client/v4/zones/$DNS_ZONE_ID/dns_records" \
		-H @- <<- HEADERS
			$CLOUDFLARE_AUTH_HEADERS
		HEADERS
}

list_dns_records_onsuccess()
{
	debug "list_dns_records_onsuccess"
	log_output LIST_SUCCESS "$1"
}

list_dns_records_onfailure()
{
	debug "list_dns_records_onfailure"
	log_output LIST_FAILED "$1"
}

update_record()
{
	debug "update_record"
	curl --silent --show-error --request PUT "https://api.cloudflare.com/client/v4/zones/$DNS_ZONE_ID/dns_records/$DNS_RECORD_ID" \
		--data "{\"type\":\"$DNS_RECORD_TYPE\",\"name\":\"$DNS_RECORD_NAME\",\"content\":\"$NEW_IP\",\"ttl\":1,\"proxied\":$DNS_RECORD_PROXIED}" \
		-H @- <<- HEADERS
			$CLOUDFLARE_AUTH_HEADERS
			Content-Type: application/json
		HEADERS
}

update_record_onsuccess()
{
	debug "update_record_onsuccess"
	$FIRMWARE_NOTIFY_CMD $FIRMWARE_UPDATE_SUCCESS
	log_output UPDATE_SUCCESS "$1"
} 

update_record_onfailure()
{
	debug "update_record_onfailure"
	$FIRMWARE_NOTIFY_CMD $FIRMWARE_UPDATE_FAILURE
	log_output UPDATE_FAILED "$1"
}

debug "Completed function definitions"

command=update_record
success=update_record_onsuccess
failure=update_record_onfailure

# if argument is the word 'list', query for a listing of all zone records
if [ "$NEW_IP" = "list" ]; then
	command=list_dns_records
	success=list_dns_records_onsuccess
	failure=list_dns_records_onfailure
fi

debug "Completed function assignments"

OUTPUT=$( $command 2> $CMD_ERROR_TEMPFILE )

debug "Completed command execution"

if echo $OUTPUT | grep -q '"success"\s*:\s*true'; then
	$success "$OUTPUT"
else
	$failure "$(cat <<- LOG_ENTRY_TEMPLATE
		===== BEGIN ERROR OUTPUT =====
		command stderr: $(cat $CMD_ERROR_TEMPFILE)
		Cloudflare response: $OUTPUT
		====== END ERROR OUTPUT ======
	LOG_ENTRY_TEMPLATE
	)"
fi

debug "Completed command result handling"
